package test.integration.commission.sales;

/*
 * #%L
 * de.metas.commission.ait
 * %%
 * Copyright (C) 2015 metas GmbH
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 2 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-2.0.html>.
 * #L%
 */


import static org.junit.Assert.assertFalse;

import java.util.List;

import org.adempiere.model.InterfaceWrapperHelper;
import org.compiere.model.MInvoice;
import org.compiere.model.MOrder;
import org.compiere.model.PO;

import test.integration.commission.helper.Helper;
import test.integration.swat.sales.SalesTestDriver;
import de.metas.adempiere.ait.event.EventType;
import de.metas.adempiere.ait.event.TestEvent;
import de.metas.adempiere.ait.test.annotation.ITEventListener;
import de.metas.commission.interfaces.IAdvComInstance;

/**
 * Class listens for {@link TestEvent}s generated by another driver and performs some commission specific actions and validation of
 * its own.
 * 
 * @author ts
 * 
 */
public class SalesTestAuxDriver
{
	/**
	 * Calls WriteCommissionAccount and asserts that
	 * <ul>
	 * <li>all candidates referencing the given order have been successfully processed</li>
	 * <li>there are commission instances referencing the given oder.</li>
	 * </ul>
	 * 
	 * @param po
	 * @return all instances that reference the given PO or that have at least one fact referencing the PO.
	 */
	@ITEventListener(
			driver = SalesTestDriver.class,
			eventTypes = {
					EventType.ORDER_PREPAY_PAID_CLOSE_AFTER,
					EventType.ORDER_PREPAY_COMPLETE_AFTER,
					EventType.ORDER_WITH_DIRECT_INVOICE_COMPLETE_AFTER,
					EventType.ORDER_POS_REACTIVATE_AFTER,
					EventType.INVOICE_PAID_REVERSE_AFTER,
					EventType.INVOICE_UNPAID_REVERSE_AFTER,
					EventType.PAYMENT_ORDER_COMPLETE_AFTER,
					EventType.PAYMENT_INVOICE_CREATE_AFTER
			})
	public void relevantPOChanged(final TestEvent evt)
	{
		final Helper helper = new Helper(evt.getSource().getHelper());

		final PO po = InterfaceWrapperHelper.getPO(evt.getObj());

		// Guard: making sure that there are no unprocessed legacy orders
		helper.assertNoFactCandsUnprocessedWithError(po);

		// Processing candidates
		helper.runProcess_WriteCommissionAccount(po.get_TrxName());

		if ((po instanceof MOrder) || (po instanceof MInvoice))
		{
			final List<IAdvComInstance> instances = helper.retrieveInstances(po);
			assertFalse(instances.isEmpty());
		}
	}
};
